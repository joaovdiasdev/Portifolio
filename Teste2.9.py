# Autor: Jo√£o Victor da Paix√£o Reis Soares Dias
# Componente Curricular: MI Algoritmos
# Conclu√≠do em: 26/10/2024, √†s 16:00
# Declaro que este c√≥digo foi elaborado por mim de forma individual e n√£o cont√©m nenhum
# trecho de c√≥digo de outro colega ou de outro autor, tais como provindos de livros e
# apostilas, e p√°ginas ou documentos eletr√¥nicos da Internet. Qualquer trecho de c√≥digo
# de outra autoria que n√£o a minha est√° destacado com uma cita√ß√£o para o autor e a fonte
# do c√≥digo, e estou ciente que estes trechos n√£o ser√£o considerados para fins de avalia√ß√£o.

# Sistema Operacional: Windows 10 (c√≥digo de limpeza = os.system('cls'))
# Bibliotecas importadas (O Numpy e a Keyboard n√£o s√£o nativas do Python, √© necess√°rio baix√°-las.)
# Para isso, escreva no terminal "pip install" e nome da biblioteca
import os, random, time, keyboard, numpy as np

# Criar o tabuleiro usando numpy
tabuleiro = np.full((20, 10), '‚¨ú')

# Pe√ßas do tetris como arrays numpy
pecas = {
    'T': np.array([['‚¨ú', 'üü™', '‚¨ú'], 
                   ['üü™', 'üü™', 'üü™']]),
    
    'I': np.array([['üü¶', 'üü¶', 'üü¶', 'üü¶']]),
    
    'S': np.array([['‚¨ú', 'üü©', 'üü©'], 
                   ['üü©', 'üü©', '‚¨ú']]),
    
    'J': np.array([['üü¶', '‚¨ú', '‚¨ú'], 
                   ['üü¶', 'üü¶', 'üü¶']]),
    
    'L': np.array([['‚¨ú', '‚¨ú', 'üüß'], 
                   ['üüß', 'üüß', 'üüß']]),
    
    'Z': np.array([['üü•', 'üü•', '‚¨ú'], 
                   ['‚¨ú', 'üü•', 'üü•']]),
    
    'O': np.array([['üü®', 'üü®'], 
                   ['üü®', 'üü®']]),
    
    'B': np.array([['üí£']])
}

# Fun√ß√£o que exibe o tabuleiro e a pontua√ß√£o
def mostrar_tabuleiro(tabuleiro, pontuacao):
    os.system('cls')
    print(f"Pontua√ß√£o: {pontuacao}")
    for linha in tabuleiro:
        print("".join(linha))

# Fun√ß√£o que desenha uma pe√ßa no tabuleiro
def colocar_peca(tabuleiro, peca, x, y):
    tabuleiro2 = tabuleiro.copy()
    for i in range(peca.shape[0]):
        for j in range(peca.shape[1]):
            if peca[i, j] != '‚¨ú': 
                tabuleiro2[y + i, x + j] = peca[i, j]
    return tabuleiro2

# Fun√ß√£o que checa colis√£o da pe√ßa com o tabuleiro e retorna True (se tiver colis√£o) ou False (se n√£o tiver)
def colisao(tabuleiro, peca, x, y):
    for i in range(peca.shape[0]):
        for j in range(peca.shape[1]):
            if peca[i, j] != '‚¨ú':
                if y + i >= 20:
                    return True
                if x + j < 0:
                    return True
                if x + j >= 10:
                    return True
                if tabuleiro[y + i, x + j] != '‚¨ú':
                    return True
    return False

# Fun√ß√£o que gira a pe√ßa no sentido anti-hor√°rio
def girar_peca(peca):
    
    return np.rot90(peca)

# Fun√ß√£o que remove as linhas completas do tabuleiro
def remover_linhas(tabuleiro):
    linhas_removidas = 0
    linhas_restantes = tabuleiro[np.any(tabuleiro == '‚¨ú', axis=1)]
    linhas_removidas = 20 - len(linhas_restantes)
    novas_linhas = np.full((linhas_removidas, 10), '‚¨ú')
    tabuleiro_novo = np.vstack((novas_linhas, linhas_restantes))
    
    return tabuleiro_novo, 100 * linhas_removidas

# Fun√ß√£o que explode a bomba
def explodir_bomba(tabuleiro, x, y):
    for i in range(max(0, y - 1), min(20, y + 2)):
        for j in range(max(0, x - 1), min(10, x + 2)):
            tabuleiro[i, j] = '‚¨ú'


# C√ìDIGO PRINCIPAL #
# In√≠cio do jogo: Menu
print("Ol√°, seja bem vindo ao Super Tetris!")
manual = input("Gostaria de verificar o manual antes de jogar? \n[S]im/[N]√£o: ")
print()

if manual in ['S', 's', 'SIM', 'Sim']:
    print('Para jogar esse tetris, utilize as teclas (‚¨Ü, ‚¨á, <- , ->) do seu teclado:')
    print('Segure ( ‚¨Ü ) para rotacionar')
    print('Segure ( <- ) para mover para a esquerda')
    print('Segure ( -> ) para mover para a direita')
    print('Segure ( ‚¨á ) para descer mais r√°pido')
    print('Dica: Apertar ( ‚¨á ) e outra tecla ao mesmo tempo ajuda a acelerar o movimento desejado')

dificuldade = input("\n[F]√°cil\n[N]ormal\n[D]if√≠cil\n[S]uper Tetris\nSelecione uma dificuldade para seu jogo: ")
print()
ligar_jogo = input("Pressione [ON] para ligar o jogo: ")

velocidade_queda = 1.0

# Definindo condi√ß√µes de dificuldade
if dificuldade in ['F', 'f', 'F√°cil', 'F√ÅCIL']:
    velocidade_queda = 1.2

elif dificuldade in ['N', 'n', 'Normal', 'NORMAL']:
    velocidade_queda = 0.8

elif dificuldade in ['D', 'd', 'Dif√≠cil', 'DIF√çCIL']:
    velocidade_queda = 0.4

elif dificuldade in ['S', 's', 'Super', 'SUPER']:
    velocidade_queda = 0.1

# Defini√ß√£o do tabuleiro, randomiza√ß√£o de pe√ßas e declara√ß√£o de vari√°veis
tabuleiro = np.full((20, 10), '‚¨ú')
peca_atual = random.choice(list(pecas.values()))
x = random.randint(0, 10 - peca_atual.shape[1])
y = 0
pontuacao = 0

# La√ßo de repeti√ß√£o de ativa√ß√£o

while ligar_jogo in ['ON', 'on', 'On', 'oN']:
    tabuleiro_com_peca = colocar_peca(tabuleiro, peca_atual, x, y)
    mostrar_tabuleiro(tabuleiro_com_peca, pontuacao)

    # Acelerar a pe√ßa
    if keyboard.is_pressed('down'):
        time.sleep(0.05)
    else:
        time.sleep(velocidade_queda)

    # Mover a pe√ßa para baixo
    if colisao(tabuleiro, peca_atual, x, y + 1) == False:
        y += 1
    else:
        if np.array_equal(peca_atual, pecas['B']):
            explodir_bomba(tabuleiro, x, y)
        else:
            tabuleiro = colocar_peca(tabuleiro, peca_atual, x, y)

        tabuleiro, pontuacao_linhas = remover_linhas(tabuleiro)
        pontuacao += pontuacao_linhas

        # Gera uma nova pe√ßa aleat√≥ria
        peca_atual = random.choice(list(pecas.values()))
        x = random.randint(0, 10 - peca_atual.shape[1])
        y = 0

    # Checa colis√£o no topo
    if colisao(tabuleiro, peca_atual, x, y):
        print(f"Game Over! Pontua√ß√£o final: {pontuacao}")
        ligar_jogo = 'OFF'

    # Controle de movimento e rota√ß√£o
    if keyboard.is_pressed('left'):
        if not colisao(tabuleiro, peca_atual, x - 1, y):
            x -= 1
    elif keyboard.is_pressed('right'): 
        if colisao(tabuleiro, peca_atual, x + 1, y) == False:
            x += 1
    elif keyboard.is_pressed('up'):
        peca_rotacionada = girar_peca(peca_atual)
        if colisao(tabuleiro, peca_rotacionada, x, y) == False:
            peca_atual = peca_rotacionada